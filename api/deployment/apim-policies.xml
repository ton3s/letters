<!--
    API Management Policies for Insurance Letter API
    
    This policy configuration provides:
    - CORS support for SPA applications
    - JWT validation with Azure AD
    - Rate limiting
    - Request/response transformation
    - Error handling
-->
<policies>
    <inbound>
        <!-- Base policy for inheriting global policies -->
        <base />
        
        <!-- CORS configuration for browser-based applications -->
        <cors allow-credentials="true">
            <allowed-origins>
                <!-- Add your allowed origins here -->
                <origin>http://localhost:3000</origin>
                <origin>https://your-production-domain.com</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        
        <!-- JWT Validation for Azure AD tokens -->
        <validate-jwt header-name="Authorization" 
                      failed-validation-httpcode="401" 
                      failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
            <!-- OpenID configuration URL - replace with your tenant ID -->
            <openid-config url="https://login.microsoftonline.com/{tenant-id}/v2.0/.well-known/openid-configuration" />
            
            <!-- Valid audiences - replace with your client ID -->
            <audiences>
                <audience>{client-id}</audience>
                <audience>api://{client-id}</audience>
            </audiences>
            
            <!-- Valid issuers -->
            <issuers>
                <issuer>https://sts.windows.net/{tenant-id}/</issuer>
                <issuer>https://login.microsoftonline.com/{tenant-id}/v2.0</issuer>
            </issuers>
            
            <!-- Required claims -->
            <required-claims>
                <claim name="aud" match="any">
                    <value>{client-id}</value>
                    <value>api://{client-id}</value>
                </claim>
            </required-claims>
        </validate-jwt>
        
        <!-- Rate limiting per user -->
        <rate-limit-by-key calls="100" 
                          renewal-period="3600" 
                          counter-key="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")" />
        
        <!-- Throttling per user -->
        <quota-by-key calls="1000" 
                     renewal-period="86400" 
                     counter-key="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")" />
        
        <!-- Add user information to backend request -->
        <set-header name="X-User-Id" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")</value>
        </set-header>
        
        <set-header name="X-User-Email" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Claims.GetValueOrDefault("preferred_username", "unknown"))</value>
        </set-header>
        
        <!-- Add Function App key for backend authentication -->
        <set-header name="x-functions-key" exists-action="override">
            <value>{{function-app-key}}</value>
        </set-header>
        
        <!-- Log request for debugging (remove in production) -->
        <trace source="api-management" severity="information">
            <message>@{
                return string.Format("User {0} calling {1}", 
                    context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous",
                    context.Request.Url.Path);
            }</message>
        </trace>
    </inbound>
    
    <backend>
        <!-- Forward to backend service -->
        <base />
        
        <!-- Retry policy for transient failures -->
        <retry condition="@(context.Response.StatusCode >= 500)" 
               count="3" 
               interval="2" 
               max-interval="10" 
               delta="2" 
               first-fast-retry="true">
            <forward-request buffer-request-body="true" />
        </retry>
    </backend>
    
    <outbound>
        <!-- Base policy -->
        <base />
        
        <!-- Add response headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        
        <set-header name="Content-Security-Policy" exists-action="override">
            <value>default-src 'self'</value>
        </set-header>
        
        <!-- Remove sensitive backend headers -->
        <set-header name="x-functions-key" exists-action="delete" />
        <set-header name="x-aspnet-version" exists-action="delete" />
        <set-header name="x-powered-by" exists-action="delete" />
    </outbound>
    
    <on-error>
        <!-- Base error handling -->
        <base />
        
        <!-- Custom error response -->
        <choose>
            <when condition="@(context.LastError.Source == "validate-jwt")">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="WWW-Authenticate" exists-action="override">
                        <value>Bearer error="invalid_token"</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "authentication_failed"),
                            new JProperty("message", "The access token is invalid or expired."),
                            new JProperty("timestamp", DateTime.UtcNow.ToString("o"))
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(context.LastError.Source == "rate-limit-by-key")">
                <return-response>
                    <set-status code="429" reason="Too Many Requests" />
                    <set-header name="Retry-After" exists-action="override">
                        <value>60</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "rate_limit_exceeded"),
                            new JProperty("message", "API rate limit exceeded. Please try again later."),
                            new JProperty("timestamp", DateTime.UtcNow.ToString("o"))
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <otherwise>
                <return-response>
                    <set-status code="500" reason="Internal Server Error" />
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "internal_error"),
                            new JProperty("message", "An unexpected error occurred."),
                            new JProperty("timestamp", DateTime.UtcNow.ToString("o")),
                            new JProperty("trackingId", context.RequestId)
                        ).ToString();
                    }</set-body>
                </return-response>
            </otherwise>
        </choose>
    </on-error>
</policies>