<policies>
    <inbound>
        <!-- CORS Policy -->
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>${allowed_origins}</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        
        <!-- JWT Validation for all endpoints except /health -->
        <choose>
            <when condition="@(!context.Request.Url.Path.Contains("/health"))">
                <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized">
                    <openid-config url="https://login.microsoftonline.com/${azure_ad_tenant_id}/v2.0/.well-known/openid-configuration" />
                    <audiences>
                        <audience>${azure_ad_client_id}</audience>
                        <audience>api://${azure_ad_client_id}</audience>
                    </audiences>
                    <issuers>
                        <issuer>https://login.microsoftonline.com/${azure_ad_tenant_id}/v2.0</issuer>
                        <issuer>https://sts.windows.net/${azure_ad_tenant_id}/</issuer>
                    </issuers>
                    <required-claims>
                        <claim name="aud">
                            <value>${azure_ad_client_id}</value>
                            <value>api://${azure_ad_client_id}</value>
                        </claim>
                    </required-claims>
                </validate-jwt>
            </when>
        </choose>
        
        <!-- Rate limiting per user -->
        <rate-limit-by-key calls="100" renewal-period="3600" counter-key="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")" />
        <rate-limit-by-key calls="1000" renewal-period="86400" counter-key="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")" />
        
        <!-- Set backend -->
        <set-backend-service backend-id="${backend_id}" />
        
        <!-- Add user information to headers for the backend -->
        <set-header name="X-User-Id" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Subject ?? "anonymous")</value>
        </set-header>
        <set-header name="X-User-Email" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("Authorization","").AsJwt()?.Claims.GetValueOrDefault("email", "unknown"))</value>
        </set-header>
    </inbound>
    
    <backend>
        <base />
    </backend>
    
    <outbound>
        <base />
        <!-- Add security headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>
    </outbound>
    
    <on-error>
        <base />
        <!-- Custom error responses -->
        <choose>
            <when condition="@(context.LastError.Reason == "Unauthorized")">
                <return-response>
                    <set-status code="401" reason="Unauthorized" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "unauthorized"),
                            new JProperty("message", "Invalid or missing authentication token")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
            <when condition="@(context.LastError.Reason == "RateLimitExceeded")">
                <return-response>
                    <set-status code="429" reason="Too Many Requests" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return new JObject(
                            new JProperty("error", "rate_limit_exceeded"),
                            new JProperty("message", "API rate limit exceeded. Please try again later.")
                        ).ToString();
                    }</set-body>
                </return-response>
            </when>
        </choose>
    </on-error>
</policies>